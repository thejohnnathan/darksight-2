@use 'sass:math';

$grid-columns: 12;
$grid-gaps: (
    "0": 0,
    "1": 10px,
    "2": 20px,
    "3": 30px,
);
$tile-values: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12;
$gap-values: (
    "1": 1rem,
    "2": 2rem,
    "3": 3rem,
    "4": 4rem,
    "5": 5rem,
    "6": 6rem,
    "7": 7rem,
    "8": 8rem,
    "9": 9rem,
    "10": 10rem,
    "11": 11rem,
    "12": 12rem,
);

$layout-values: flex-start, flex-end, center, space-between, space-around;

// base layout classes
.container {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
    box-sizing: border-box;
}

.row {
    display: flex !important;
    flex-flow: row wrap;
    align-items: stretch;
}

.tiles {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(5rem, 1fr));
    gap: 1rem;
    width: 100%;

    & .tile {
        width: 100%;
        display: inline-grid;

        &>* {
            margin: $base-margin;
        }
    }
}

// tile layouts with cols and rows
@each $val in $tile-values {
    .cols-#{$val} {
        grid-column: span $val;
    }

    .rows-#{$val} {
        grid-row: span $val;
    }
}

// tile gaps
@each $key, $val in $gap-values {
    .g-#{$key} {
        gap: $val !important;
    }
}

// grid gaps
@each $key, $val in $grid-gaps {
    .gap-#{$key}>* {
        padding: $val;
    }

    .gap-#{$key} {
        margin-left: -$val;
        margin-right: -$val;
    }
}

// justify content classes
@each $val in $layout-values {
    .justify-#{$val} {
        justify-content: $val;
    }
}

// col classes
@include xs {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-xs {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include sm {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-sm {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include md {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-md {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include lg {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-lg {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include xl {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-xl {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}